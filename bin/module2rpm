#!/usr/bin/env raku

use JSON::Fast;
use File::Temp;

use Module2Rpm::Download::Curl;
use Module2Rpm::Download::Git;
use Module2Rpm::Archive::Tar;
use Module2Rpm::Spec;
use Module2Rpm::Package;
use Module2Rpm::Helper;

my $helper = Module2Rpm::Helper.new;

# Where the source code and the spec files are stored. At the moment a directory in the root folder is used.
# In the future a temporary directory will be used once the OBS upload works.
my $destination-path = "./packages".IO;

#| Prints the help.
multi MAIN(:h(:$help)) {
    help();
}

#| Downloads, creates spec files and uploads them to OBS for all modules given in a file.
multi MAIN(:$file!) {
    say "Parse download file: $file";
    my @packages = $helper.create-packages(path => $destination-path, file => $file.IO);

    for @packages -> $package {
        say "{$package.spec.get-name()}: Download source...";
        $package.Download();
        say "{$package.spec.get-name()}: Write spec file...";
        $package.write-spec-file();
    }
}

#| Downloads, creates spec file and uploads to OBS a given module.
multi MAIN(:$module!) {
    say "Fetch module metadata...";
    my %all-metadata = $helper.fetch-metadata();

    my $module-metadata = %all-metadata{$module};
    die "Did not find metadata for module '$module'" unless $module-metadata;

    my $spec = Module2Rpm::Spec.new(metadata => $module-metadata);
    my $package = Module2Rpm::Package.new(spec => $spec, path => $destination-path);

    say "Download module source...";
    $package.Download();

    say "Write spec file...";
    $package.write-spec-file();

    say "Done";
}

sub help() {
    say q:to/HELP/;
    module2rpm [--module=module::name | --file=filePath]

    This program downloads the source of a Raku module, writes the spec file
    with the metadata and uploads both files to OBS.

    OPTIONS:
        --module=module::name   Looks for the module::name in the Raku
                                ecosystem to get the metadata of it. Then write
                                the spec file and uploads the module source and
                                spec file to OBS.
        --file=filePath         Expect a file with either Module::Names or
                                metadata urls. Download the sources and
                                uploaded them together with the spec files to
                                OBS.
    HELP
}