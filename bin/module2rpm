#!/usr/bin/env raku

use JSON::Fast;
use File::Temp;

use Module2Rpm::Download::Curl;
use Module2Rpm::Download::Git;
use Module2Rpm::Archive::Tar;
use Module2Rpm::Spec;
use Module2Rpm::Package;

my @metadata-sources =
        'https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json',
        'https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json';

#| Prints help
multi sub MAIN() {

}

#| Downloads, creates spec files and uploads them to OBS for all modules given in a file.
multi sub MAIN(:$metalist) {
    # Go through the file line by line.
    # Each line is handled as URL and expect to retrieve a json with meta information.
    # Download module source code.
    # Write Spec file.
    # Upload to OBS.
    # Repeat.
}

#| Downloads, creates spec file and uploads to OBS a given module.
multi sub MAIN(:$module) {
    say "Fetch module metadata...";
    my $curl = Module2Rpm::Download::Curl.new;
    my @all-metadata = @metadata-sources.map({from-json($curl.Download($_))}).flat;
    my %all-metadata = @all-metadata.map: {$_<name> => $_ };

    my $module-metadata = %all-metadata{$module};
    die "Did not find metadata for module '$module'" unless $module-metadata;

    my $spec = Module2Rpm::Spec.new(metadata => $module-metadata);
    my $package = Module2Rpm::Package.new(spec => $spec, path => "packages".IO);

    say "Download module source...";
    $package.Download();

    say "Write spec file...";
    $package.write-spec-file();

    say "Done";
}